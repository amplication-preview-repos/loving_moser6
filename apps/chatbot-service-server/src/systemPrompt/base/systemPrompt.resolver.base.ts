/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SystemPrompt } from "./SystemPrompt";
import { SystemPromptCountArgs } from "./SystemPromptCountArgs";
import { SystemPromptFindManyArgs } from "./SystemPromptFindManyArgs";
import { SystemPromptFindUniqueArgs } from "./SystemPromptFindUniqueArgs";
import { DeleteSystemPromptArgs } from "./DeleteSystemPromptArgs";
import { SystemPromptService } from "../systemPrompt.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SystemPrompt)
export class SystemPromptResolverBase {
  constructor(
    protected readonly service: SystemPromptService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SystemPrompt",
    action: "read",
    possession: "any",
  })
  async _systemPromptsMeta(
    @graphql.Args() args: SystemPromptCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SystemPrompt])
  @nestAccessControl.UseRoles({
    resource: "SystemPrompt",
    action: "read",
    possession: "any",
  })
  async systemPrompts(
    @graphql.Args() args: SystemPromptFindManyArgs
  ): Promise<SystemPrompt[]> {
    return this.service.systemPrompts(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SystemPrompt, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SystemPrompt",
    action: "read",
    possession: "own",
  })
  async systemPrompt(
    @graphql.Args() args: SystemPromptFindUniqueArgs
  ): Promise<SystemPrompt | null> {
    const result = await this.service.systemPrompt(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SystemPrompt)
  @nestAccessControl.UseRoles({
    resource: "SystemPrompt",
    action: "delete",
    possession: "any",
  })
  async deleteSystemPrompt(
    @graphql.Args() args: DeleteSystemPromptArgs
  ): Promise<SystemPrompt | null> {
    try {
      return await this.service.deleteSystemPrompt(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
