/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SystemPrompt as PrismaSystemPrompt } from "@prisma/client";

export class SystemPromptServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SystemPromptCountArgs, "select">
  ): Promise<number> {
    return this.prisma.systemPrompt.count(args);
  }

  async systemPrompts(
    args: Prisma.SystemPromptFindManyArgs
  ): Promise<PrismaSystemPrompt[]> {
    return this.prisma.systemPrompt.findMany(args);
  }
  async systemPrompt(
    args: Prisma.SystemPromptFindUniqueArgs
  ): Promise<PrismaSystemPrompt | null> {
    return this.prisma.systemPrompt.findUnique(args);
  }
  async createSystemPrompt(
    args: Prisma.SystemPromptCreateArgs
  ): Promise<PrismaSystemPrompt> {
    return this.prisma.systemPrompt.create(args);
  }
  async updateSystemPrompt(
    args: Prisma.SystemPromptUpdateArgs
  ): Promise<PrismaSystemPrompt> {
    return this.prisma.systemPrompt.update(args);
  }
  async deleteSystemPrompt(
    args: Prisma.SystemPromptDeleteArgs
  ): Promise<PrismaSystemPrompt> {
    return this.prisma.systemPrompt.delete(args);
  }
}
